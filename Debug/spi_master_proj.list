
spi_master_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000034c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d4  080004dc  000104dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d4  080004d4  000104dc  2**0
                  CONTENTS
  4 .ARM          00000000  080004d4  080004d4  000104dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d4  080004dc  000104dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d8  080004d8  000104d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000104dc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000104dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008ef  00000000  00000000  0001050c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000248  00000000  00000000  00010dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00011048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000068  00000000  00000000  000110d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001129  00000000  00000000  00011140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000970  00000000  00000000  00012269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000043bf  00000000  00000000  00012bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00016f98  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000015c  00000000  00000000  00016fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004bc 	.word	0x080004bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080004bc 	.word	0x080004bc

080001c8 <GPIO_Init>:
 * Author: Jan Morrison
*/

#include "gpio_driver.h"

void GPIO_Init(GPIO_Handle_t* GPIO_Handle, GPIO_Port_t GPIO_Port) {
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
    GPIO_Reg_t* pGPIOx = GPIO_Handle->pGPIOx;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	61fb      	str	r3, [r7, #28]
    GPIO_Config_t GPIOConfig = GPIO_Handle->GPIOConfig;
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	3204      	adds	r2, #4
 80001e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t GPIOPin = GPIOConfig.PIN;
 80001ea:	7b3b      	ldrb	r3, [r7, #12]
 80001ec:	76fb      	strb	r3, [r7, #27]
	RCC_Reg_t* pRCCReg = (RCC_Reg_t*)RCC_BASE_ADDRESS;
 80001ee:	4b6b      	ldr	r3, [pc, #428]	; (800039c <GPIO_Init+0x1d4>)
 80001f0:	617b      	str	r3, [r7, #20]


    // Enable clock and assign gpio address
    switch(GPIO_Port) {
 80001f2:	78fb      	ldrb	r3, [r7, #3]
 80001f4:	2b07      	cmp	r3, #7
 80001f6:	d85c      	bhi.n	80002b2 <GPIO_Init+0xea>
 80001f8:	a201      	add	r2, pc, #4	; (adr r2, 8000200 <GPIO_Init+0x38>)
 80001fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fe:	bf00      	nop
 8000200:	08000221 	.word	0x08000221
 8000204:	08000235 	.word	0x08000235
 8000208:	08000247 	.word	0x08000247
 800020c:	08000259 	.word	0x08000259
 8000210:	0800026b 	.word	0x0800026b
 8000214:	0800027d 	.word	0x0800027d
 8000218:	0800028f 	.word	0x0800028f
 800021c:	080002a1 	.word	0x080002a1
        case(GPIO_PORT_A):
            pGPIOx = (GPIO_Reg_t*)GPIOA;
 8000220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000224:	61fb      	str	r3, [r7, #28]
            pRCCReg->RCC_AHB2ENR |= (1 << GPIO_PORT_A);
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	f043 0201 	orr.w	r2, r3, #1
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8000232:	e03e      	b.n	80002b2 <GPIO_Init+0xea>
        case(GPIO_PORT_B):
            pGPIOx = (GPIO_Reg_t*)GPIOB;
 8000234:	4b5a      	ldr	r3, [pc, #360]	; (80003a0 <GPIO_Init+0x1d8>)
 8000236:	61fb      	str	r3, [r7, #28]
            pRCCReg->RCC_AHB2ENR |= (1 << GPIO_PORT_B);
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023c:	f043 0202 	orr.w	r2, r3, #2
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8000244:	e035      	b.n	80002b2 <GPIO_Init+0xea>
        case(GPIO_PORT_C):
            pGPIOx = (GPIO_Reg_t*)GPIOC;
 8000246:	4b57      	ldr	r3, [pc, #348]	; (80003a4 <GPIO_Init+0x1dc>)
 8000248:	61fb      	str	r3, [r7, #28]
            pRCCReg->RCC_AHB2ENR |= (1 << GPIO_PORT_C);
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024e:	f043 0204 	orr.w	r2, r3, #4
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8000256:	e02c      	b.n	80002b2 <GPIO_Init+0xea>
        case(GPIO_PORT_D):
            pGPIOx = (GPIO_Reg_t*)GPIOD;
 8000258:	4b53      	ldr	r3, [pc, #332]	; (80003a8 <GPIO_Init+0x1e0>)
 800025a:	61fb      	str	r3, [r7, #28]
            pRCCReg->RCC_AHB2ENR |= (1 << GPIO_PORT_D);
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000260:	f043 0208 	orr.w	r2, r3, #8
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8000268:	e023      	b.n	80002b2 <GPIO_Init+0xea>
        case(GPIO_PORT_E):
            pGPIOx = (GPIO_Reg_t*)GPIOE;
 800026a:	4b50      	ldr	r3, [pc, #320]	; (80003ac <GPIO_Init+0x1e4>)
 800026c:	61fb      	str	r3, [r7, #28]
            pRCCReg->RCC_AHB2ENR |= (1 << GPIO_PORT_E);
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000272:	f043 0210 	orr.w	r2, r3, #16
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 800027a:	e01a      	b.n	80002b2 <GPIO_Init+0xea>
        case(GPIO_PORT_F):
            pGPIOx = (GPIO_Reg_t*)GPIOF;
 800027c:	4b4c      	ldr	r3, [pc, #304]	; (80003b0 <GPIO_Init+0x1e8>)
 800027e:	61fb      	str	r3, [r7, #28]
            pRCCReg->RCC_AHB2ENR |= (1 << GPIO_PORT_F);
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000284:	f043 0220 	orr.w	r2, r3, #32
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 800028c:	e011      	b.n	80002b2 <GPIO_Init+0xea>
        case(GPIO_PORT_G):
            pGPIOx = (GPIO_Reg_t*)GPIOG;
 800028e:	4b49      	ldr	r3, [pc, #292]	; (80003b4 <GPIO_Init+0x1ec>)
 8000290:	61fb      	str	r3, [r7, #28]
            pRCCReg->RCC_AHB2ENR |= (1 << GPIO_PORT_G);
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 800029e:	e008      	b.n	80002b2 <GPIO_Init+0xea>
        case(GPIO_PORT_H):
            pGPIOx = (GPIO_Reg_t*)GPIOH;
 80002a0:	4b45      	ldr	r3, [pc, #276]	; (80003b8 <GPIO_Init+0x1f0>)
 80002a2:	61fb      	str	r3, [r7, #28]
            pRCCReg->RCC_AHB2ENR |= (1 << GPIO_PORT_H);
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 80002b0:	bf00      	nop
    }

    // Port Mode
    pGPIOx->MODER &= ~(0x3 << 2 * GPIOPin);
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	7efa      	ldrb	r2, [r7, #27]
 80002b8:	0052      	lsls	r2, r2, #1
 80002ba:	2103      	movs	r1, #3
 80002bc:	fa01 f202 	lsl.w	r2, r1, r2
 80002c0:	43d2      	mvns	r2, r2
 80002c2:	401a      	ands	r2, r3
 80002c4:	69fb      	ldr	r3, [r7, #28]
 80002c6:	601a      	str	r2, [r3, #0]
    pGPIOx->MODER |= (GPIOConfig.PIN_MODE << 2 * GPIOPin);
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	7b7a      	ldrb	r2, [r7, #13]
 80002ce:	4611      	mov	r1, r2
 80002d0:	7efa      	ldrb	r2, [r7, #27]
 80002d2:	0052      	lsls	r2, r2, #1
 80002d4:	fa01 f202 	lsl.w	r2, r1, r2
 80002d8:	431a      	orrs	r2, r3
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	601a      	str	r2, [r3, #0]

    if (GPIOConfig.PIN_MODE == OUTPUT_MODE) {
 80002de:	7b7b      	ldrb	r3, [r7, #13]
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d114      	bne.n	800030e <GPIO_Init+0x146>
        // Output Type
        pGPIOx->OTYPER |= (GPIOConfig.OUTPUT_TYPE << GPIOPin);
 80002e4:	69fb      	ldr	r3, [r7, #28]
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	7bba      	ldrb	r2, [r7, #14]
 80002ea:	4611      	mov	r1, r2
 80002ec:	7efa      	ldrb	r2, [r7, #27]
 80002ee:	fa01 f202 	lsl.w	r2, r1, r2
 80002f2:	431a      	orrs	r2, r3
 80002f4:	69fb      	ldr	r3, [r7, #28]
 80002f6:	605a      	str	r2, [r3, #4]

        // Output Speed
        pGPIOx->OSPEEDR |= (GPIOConfig.OUTPUT_SPEED << 2 * GPIOPin);
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	7bfa      	ldrb	r2, [r7, #15]
 80002fe:	4611      	mov	r1, r2
 8000300:	7efa      	ldrb	r2, [r7, #27]
 8000302:	0052      	lsls	r2, r2, #1
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	431a      	orrs	r2, r3
 800030a:	69fb      	ldr	r3, [r7, #28]
 800030c:	609a      	str	r2, [r3, #8]
    }

    // PUPDR
    pGPIOx->PUPDR |= ~(0x3 << 2 * GPIOPin);
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	7efa      	ldrb	r2, [r7, #27]
 8000314:	0052      	lsls	r2, r2, #1
 8000316:	2103      	movs	r1, #3
 8000318:	fa01 f202 	lsl.w	r2, r1, r2
 800031c:	43d2      	mvns	r2, r2
 800031e:	431a      	orrs	r2, r3
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	60da      	str	r2, [r3, #12]
    pGPIOx->PUPDR |= (GPIOConfig.PUPD << 2 * GPIOPin);
 8000324:	69fb      	ldr	r3, [r7, #28]
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	7c3a      	ldrb	r2, [r7, #16]
 800032a:	4611      	mov	r1, r2
 800032c:	7efa      	ldrb	r2, [r7, #27]
 800032e:	0052      	lsls	r2, r2, #1
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	431a      	orrs	r2, r3
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	60da      	str	r2, [r3, #12]

    // Alternate Function
    pGPIOx->AFR[GPIOPin / 8] |= ~(0xF << 4 * GPIOPin);
 800033a:	7efb      	ldrb	r3, [r7, #27]
 800033c:	08db      	lsrs	r3, r3, #3
 800033e:	b2d8      	uxtb	r0, r3
 8000340:	4602      	mov	r2, r0
 8000342:	69fb      	ldr	r3, [r7, #28]
 8000344:	3208      	adds	r2, #8
 8000346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800034a:	7efa      	ldrb	r2, [r7, #27]
 800034c:	0092      	lsls	r2, r2, #2
 800034e:	210f      	movs	r1, #15
 8000350:	fa01 f202 	lsl.w	r2, r1, r2
 8000354:	43d2      	mvns	r2, r2
 8000356:	4611      	mov	r1, r2
 8000358:	4602      	mov	r2, r0
 800035a:	4319      	orrs	r1, r3
 800035c:	69fb      	ldr	r3, [r7, #28]
 800035e:	3208      	adds	r2, #8
 8000360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pGPIOx->AFR[GPIOPin / 8] |= (GPIOConfig.ALTERNATE_FUNCTION << 4 * GPIOPin);
 8000364:	7efb      	ldrb	r3, [r7, #27]
 8000366:	08db      	lsrs	r3, r3, #3
 8000368:	b2d9      	uxtb	r1, r3
 800036a:	460a      	mov	r2, r1
 800036c:	69fb      	ldr	r3, [r7, #28]
 800036e:	3208      	adds	r2, #8
 8000370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000374:	7cfa      	ldrb	r2, [r7, #19]
 8000376:	4610      	mov	r0, r2
 8000378:	7efa      	ldrb	r2, [r7, #27]
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	fa00 f202 	lsl.w	r2, r0, r2
 8000380:	4610      	mov	r0, r2
 8000382:	460a      	mov	r2, r1
 8000384:	ea43 0100 	orr.w	r1, r3, r0
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	3208      	adds	r2, #8
 800038c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000390:	bf00      	nop
 8000392:	3724      	adds	r7, #36	; 0x24
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000
 80003a0:	48000400 	.word	0x48000400
 80003a4:	48000800 	.word	0x48000800
 80003a8:	48000c00 	.word	0x48000c00
 80003ac:	48001000 	.word	0x48001000
 80003b0:	48001400 	.word	0x48001400
 80003b4:	48001800 	.word	0x48001800
 80003b8:	48001c00 	.word	0x48001c00

080003bc <GPIO_ReadPin>:

void GPIO_DeInit(GPIO_Handle_t* GPIO_Handle) {
    // reset pin
}

uint8_t GPIO_ReadPin(GPIO_Handle_t* GPIO_Handle) {
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
    uint16_t IDR = GPIO_Handle->pGPIOx->IDR;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	691b      	ldr	r3, [r3, #16]
 80003ca:	81fb      	strh	r3, [r7, #14]
    uint8_t pin = GPIO_Handle->GPIOConfig.PIN;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	791b      	ldrb	r3, [r3, #4]
 80003d0:	737b      	strb	r3, [r7, #13]

    return ((IDR >> pin) & 0x1);
 80003d2:	89fa      	ldrh	r2, [r7, #14]
 80003d4:	7b7b      	ldrb	r3, [r7, #13]
 80003d6:	fa42 f303 	asr.w	r3, r2, r3
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	b2db      	uxtb	r3, r3
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr

080003ee <main>:
#include <stdint.h>
#include "stm32l476rg.h"
#include "gpio_driver.h"

int main(void)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b086      	sub	sp, #24
 80003f2:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOC_Pin3_Handle;
    GPIO_Config_t* GPIOC_Pin3_Config = &GPIOC_Pin3_Handle.GPIOConfig;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	3304      	adds	r3, #4
 80003f8:	617b      	str	r3, [r7, #20]

    GPIOC_Pin3_Config->PIN = 3;
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	2203      	movs	r2, #3
 80003fe:	701a      	strb	r2, [r3, #0]
    GPIOC_Pin3_Config->PIN_MODE = INPUT_MODE;
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	2200      	movs	r2, #0
 8000404:	705a      	strb	r2, [r3, #1]

    GPIO_Init(&GPIOC_Pin3_Handle, GPIO_PORT_C);
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2102      	movs	r1, #2
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff fedc 	bl	80001c8 <GPIO_Init>

    uint8_t val = GPIO_ReadPin(&GPIOC_Pin3_Handle);
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ffd2 	bl	80003bc <GPIO_ReadPin>
 8000418:	4603      	mov	r3, r0
 800041a:	74fb      	strb	r3, [r7, #19]

    /* Loop forever */
	for(;;);
 800041c:	e7fe      	b.n	800041c <main+0x2e>
	...

08000420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000422:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000424:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480c      	ldr	r0, [pc, #48]	; (800045c <LoopForever+0x6>)
  ldr r1, =_edata
 800042a:	490d      	ldr	r1, [pc, #52]	; (8000460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <LoopForever+0xe>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000440:	4c0a      	ldr	r4, [pc, #40]	; (800046c <LoopForever+0x16>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044e:	f000 f811 	bl	8000474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000452:	f7ff ffcc 	bl	80003ee <main>

08000456 <LoopForever>:

LoopForever:
  b LoopForever
 8000456:	e7fe      	b.n	8000456 <LoopForever>
  ldr   r0, =_estack
 8000458:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800045c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000460:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000464:	080004dc 	.word	0x080004dc
  ldr r2, =_sbss
 8000468:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800046c:	2000001c 	.word	0x2000001c

08000470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC1_2_IRQHandler>
	...

08000474 <__libc_init_array>:
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	4d0d      	ldr	r5, [pc, #52]	; (80004ac <__libc_init_array+0x38>)
 8000478:	4c0d      	ldr	r4, [pc, #52]	; (80004b0 <__libc_init_array+0x3c>)
 800047a:	1b64      	subs	r4, r4, r5
 800047c:	10a4      	asrs	r4, r4, #2
 800047e:	2600      	movs	r6, #0
 8000480:	42a6      	cmp	r6, r4
 8000482:	d109      	bne.n	8000498 <__libc_init_array+0x24>
 8000484:	4d0b      	ldr	r5, [pc, #44]	; (80004b4 <__libc_init_array+0x40>)
 8000486:	4c0c      	ldr	r4, [pc, #48]	; (80004b8 <__libc_init_array+0x44>)
 8000488:	f000 f818 	bl	80004bc <_init>
 800048c:	1b64      	subs	r4, r4, r5
 800048e:	10a4      	asrs	r4, r4, #2
 8000490:	2600      	movs	r6, #0
 8000492:	42a6      	cmp	r6, r4
 8000494:	d105      	bne.n	80004a2 <__libc_init_array+0x2e>
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	f855 3b04 	ldr.w	r3, [r5], #4
 800049c:	4798      	blx	r3
 800049e:	3601      	adds	r6, #1
 80004a0:	e7ee      	b.n	8000480 <__libc_init_array+0xc>
 80004a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a6:	4798      	blx	r3
 80004a8:	3601      	adds	r6, #1
 80004aa:	e7f2      	b.n	8000492 <__libc_init_array+0x1e>
 80004ac:	080004d4 	.word	0x080004d4
 80004b0:	080004d4 	.word	0x080004d4
 80004b4:	080004d4 	.word	0x080004d4
 80004b8:	080004d8 	.word	0x080004d8

080004bc <_init>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr

080004c8 <_fini>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr
